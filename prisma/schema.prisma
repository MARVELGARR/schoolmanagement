// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  email      String?   @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  access_token String?
  token_type String?
  role UserRole?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  account Account[]
  student Student? @relation(fields: [studentId], references:[id])
  studentId String? @db.ObjectId @unique
  teacher Teacher? @relation(fields: [teacherId], references:[id])
  teacherId String? @db.ObjectId @unique
  parent Parents? @relation(fields: [parentId], references:[id])
  parentId String? @db.ObjectId @unique

  userId String? @db.ObjectId


}

model Account{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String?
  providerAccountId String
  refresh_token String?
  access_token String?
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Teacher{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId 
  firstname   String
  lastname   String
  middlename  String
  gender Gender
  email      String?   @unique
  phone String?
  about String?
  image String?
  user User?
  religion Religion? 
  marital_status Maritalstatus
  birthday DateTime
  socials Socials[]
  yearJoined DateTime?
  courses   CourseEnrollment[]   // Array of subjects the teacher teaches
  address     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
model Student{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname   String
  user User? 
  userId String? @db.ObjectId @unique
  gender Gender?
  courses   CourseEnrollment[]
  middlename  String
  email      String   @unique
  phone String?
  image String?
  level String?
  about String?
  yearJoined DateTime?
  parent Parents? @relation(fields: [parentId], references: [id])
  parentId String? @db.ObjectId
  birthday DateTime? 
  address     String?
  maritalStatus Maritalstatus?
  socials Socials[]
  religion  Religion?
  grade Grade[]        // Grade/Class of the student    // Address of the teacher
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
model Parents{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  firstname   String
  lastname   String
  middlename  String
  gender String
  email      String   @unique
  phone String?
  image String? 
  birthday String  
  address     String?
  marital_status Maritalstatus
  user User?
  socials Socials[] 
  userId String? @db.ObjectId @unique
  student Student[]
  religion  Religion     // Grade/Class of the student    // Address of the teacher
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Course{
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name String
  unit Int
  studentId String @db.ObjectId
  grade Grade?
  members CourseEnrollment[]
}
model Grade {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  grade     Result?
  student   Student  @relation(fields: [studentId], references: [id])
  studentId String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String @db.ObjectId @unique
  // Add more grade-related attributes as needed
}

model CourseEnrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  role      UserRole

  // Relation Fields
  studentId String @db.ObjectId
  student   Student @relation(fields: [studentId], references: [id])
  teacherId String @db.ObjectId
  teacher   Teacher @relation(fields: [teacherId], references: [id])
  courseId  String @db.ObjectId
  course    Course  @relation(fields: [courseId], references: [id])

}


enum Maritalstatus {
  single
  married
  complicated
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENTS
  USER
}

enum Result {
  A
  B
  C
  D
  E
  F
}

enum Religion {
  christain
  muslim  
  judiasm
  // Add other roles as needed
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Socials {
  FACEBOOK
  INSTAGRAM
  WEBSITE
  TWITTER
  THREAD
}